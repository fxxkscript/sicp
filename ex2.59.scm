(define (element-of-set? x set)
  (cond ((null? set) false)
        ((equal? x (car set)) true)
        (else (element-of-set? x (cdr set))))
  )
(define (adjoin-set x set)
  (if (element-of-set? x set)
      set
      (cons x set)))

(define (intersection-set set1 set2)
  (cond ((or (null? set1) (null? set2)) '())
        ((element-of-set? (car set1) set2)
         (cons (car set1)
               (intersection-set (cdr set1) set2)))
        (else
         (intersection-set (cdr set1) set2))))

(define (union-set set1 set2)
  (cond ((null? set1) set2)
        ((null? set2) set1)
        ((not (element-of-set? (car set1) set2))
         (union-set (cdr set1) (cons (car set1) set2)))
        (else
         (union-set (cdr set1) set2))))

;;test
(let* ((x 1)
      (set (list 1 2 3 4 5))
      (res1 (element-of-set? x set))
      (res2 (adjoin-set 10 set))
      (res3 (intersection-set (list 1 3 5) set))
      (res4 (union-set (list 1 3 4 6 7 8) set)))
  (newline)
  (display set)
  (newline)
  (display res1)
  (newline)
  (display res2)
  (newline)
  (display res3)
  (newline)
  (display res4))
